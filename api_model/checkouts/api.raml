#%RAML 1.0

title: Checkouts API
version: 1.0
baseUri: https://demo.ecommerce.com/checkouts
mediaType: application/json

uses:
  rest: ../dependencies/rest.raml
  data_model: ../dependencies/data_model.yaml  
  schema: ./schema.raml
types:
  # This is ad-hoc, it can be generated when binding the schema to the resource
  # in the GUI tool.
  # It is still possible to customize the schemas from tehd ata model.
  CheckoutUpdate:
    (data_model.context): ../../data_model/checkouts/schema.yaml
    (schema.model): Checkout
    (schema.mode): write
    properties:
      lineItems?: schema.CheckoutLineItem[]
      shippingLine:
        properties:
          handle: string                 

/shopping_carts:
  (rest.resource): ShoppingCart Collection  
  (rest.resourceType): collection
  post:
    is: [ rest.create: {schema: schema.ShoppingCartWrite} ]
  get:
    is: [ rest.list: {schema: schema.ShoppingCartRead} ]
  (rest.hateoas):
    members:
      resource: ShoppingCart
      method: get

/shopping_carts/{shoppingcartId}:
  (rest.resource): ShoppingCart  
  (rest.resourceType): individual
  get:
    is: [ rest.read: {schema: schema.ShoppingCartRead} ]
  put:
    is: [ rest.update: {schema: schema.ShoppingCartWrite} ]
  delete:
    is: [ rest.destroy ]
  (rest.hateoas):
    checkout:
      resource: Checkouts Collection
      method: post
      
/checkouts:
  (rest.resource): Checkouts Collection  
  (rest.resourceType): collection
  post:
    is: [ rest.create: {schema: schema.CheckoutCreate} ]
  get:
    is: [ rest.list: {schema: schema.CheckoutRead} ]
  (rest.hateoas):
    members:
      resource: Checkout
      method: get
 
/checkouts/{checkoutId}:
  (rest.resource): Checkout
  (rest.resourceType): individual
  get:
    is: [ rest.read: {schema: schema.CheckoutRead} ]
  put:
    is: [ rest.update: {schema: CheckoutUpdate} ]
  (rest.hateoas):
    availableShippingRates:
      resource: ShippingRates
      method: get
    selectShippingLine:
      resource: ShippingLine
      method: put
    pay:
      resource: Checkout Payment
      method: post
    order:
      resource: Order
      method: get

/checkouts/{checkoutId}/shipping_rates:
  (rest.resource): ShippingRates
  (rest.resourceType): collection
  get:
    is: [ rest.subscribe: {schema: schema.ShippingRateRead} ]

/checkouts/{checkoutId}/shipping_line:
  (rest.resource): ShippingLine
  (rest.resourceType): collection
  get:
    is: [ rest.read: {schema: schema.ShippingRateRead} ]
  put:
    is: [ rest.create: {schema: schema.ShippingRateWrite} ]

/checkouts/{checkoutId}/payments:
  (rest.resource): Checkout Payment
  (rest.resourceType): individual
  post:
    is: [ rest.publish: {schema: schema.PaymentWrite} ]
  get:
    is: [ rest.subscribe: {schema: schema.PaymentRead} ]

/checkouts/{checkoutId}/order:
  (rest.resource): Order
  (rest.resourceType): individual
  get:
    is: [ rest.subscribe: {schema: schema.Order} ]
